na.columns  <- apply(data, 2, anyNA)
data <- data[, !names(data) %in% names(data)[na.columns]]
# Remove the columns that contain blank data in one or more rows
blank.columns <- apply(data, 2, function(x) sum(x=="")!=0)
data <- data[, !names(data) %in% names(data)[blank.columns]]
# Remove non-relevant columns
data$user_name <- NULL
data$raw_timestamp_part_1 <- NULL
data$raw_timestamp_part_2 <- NULL
data$cvtd_timestamp <- NULL
data$new_window <- NULL
data$num_window <- NULL
data$X <- NULL
```
## Step 2: Split the training data (60% for training and 40% for testing)
``` {r}
inTrain <- createDataPartition(y=data$classe,
p=0.6, list=FALSE)
train.data <- data[inTrain,]
test.data <- data[-inTrain,]
cor_matrix <- abs(cor(train.data[, -53]))
diag(cor_matrix) <- 0
cor_matrix <- melt(cor_matrix)
cor_matrix <- cor_matrix[order(cor_matrix$X1), ]
cor_matrix[cor_matrix$value > 0.8, ]
preProc <- preProcess(train.data[, -53], method="pca")
train.data.PC <- predict(preProc, train.data[, -53])
date()
modelFit_rf <- train(train.data$classe ~ ., method="rf", data=train.data.PC)
date()
modelFit_rf <- train(train.data$classe ~ ., method="rf", data=train.data.PC)
# Tree Model
date()
tc <- trainControl("cv",10)
modelFit_rpart <- train(train.data$classe ~ ., data= train.data.PC, method="rpart", trControl=tc)
date()
modelFit_rpart
modelFit_rf
getModelInfo()
name(getModelInfo())
names(getModelInfo())
date()
modelFit_lda <- train(train.data$classe ~ ., method="lda", data=train.data.PC)
date()
source('~/.active-rstudio-document', echo=TRUE)
date()
modelFit_nb <- train(train.data$classe ~ ., method="nb", data=train.data.PC)
date()
modelFit_svm <- train(train.data$classe ~ ., method="svm", data=train.data.PC)
date()
names(getModelInfo())
date()
modelFit_svm <- train(train.data$classe ~ ., method="svmLinear", data=train.data.PC)
model_svm
modelFit_svm
date()
modelFit_knn <- train(train.data$classe ~ ., method="knn", data=train.data.PC)
date()
modelFit_knn
modelFit_svm <- train(train.data$classe ~ ., method="svmLinear", data=train.data.PC, trControl=tc)
modelFit_svm
date()
modelFit_knn <- train(train.data$classe ~ ., method="knn", data=train.data.PC, trControl=tc)
date()
modelFit_knn2 <- train(train.data$classe ~ ., method="knn", data=train.data.PC)
modelFit_knn
modelFit_knn2
modelFit_knn$results$Accuracy
modelFit_knn$results$Accuracy[1]
c("KNN with 10-fold cross validation", modelFit_knn$results$Accuracy[1] )
c("KNN with 10-fold cross validation", round(modelFit_knn$results$Accuracy[1], 2) )
results <- c("KNN with 10-fold cross validation", round(modelFit_knn$results$Accuracy[1], 2))
results <- rbind(results, c("KNN with standard cross validation", round(modelFit_knn$results$Accuracy[1], 2)))
results
round(modelFit_svm$results$Accuracy[1], 2)
modelFit_rf
round(modelFit_rf$results$Accuracy[1], 2)
results <- c("KNN with 10-fold cross validation", round(modelFit_knn$results$Accuracy[1], 2) )
results <- rbind(results, results <- c("SVM with 10-fold cross validation", round(modelFit_svm$results$Accuracy[1], 2) ))
results <- rbind(results, results <- c("Trees with 10-fold cross validation", round(modelFit_rpart$results$Accuracy[1], 2) ))
results <- rbind(results, results <- c("Random forest bootstrapped", round(modelFit_rf$results$Accuracy[1], 2) ))
results
results <- as.data.frame(results)
results
results <- c("KNN with 10-fold cross validation", round(modelFit_knn$results$Accuracy[1], 2) )
results <- as.data.frame(results)
results <- rbind(results, results <- c("SVM with 10-fold cross validation", round(modelFit_svm$results$Accuracy[1], 2) ))
results <- rbind(results, results <- c("Trees with 10-fold cross validation", round(modelFit_rpart$results$Accuracy[1], 2) ))
results <- rbind(results, results <- c("Random forest bootstrapped", round(modelFit_rf$results$Accuracy[1], 2) ))
results
results <- c("KNN with 10-fold cross validation", round(modelFit_knn$results$Accuracy[1], 2) )
results <- rbind(results, results <- c("SVM with 10-fold cross validation", round(modelFit_svm$results$Accuracy[1], 2) ))
results <- rbind(results, results <- c("Trees with 10-fold cross validation", round(modelFit_rpart$results$Accuracy[1], 2) ))
results <- rbind(results, results <- c("Random forest bootstrapped", round(modelFit_rf$results$Accuracy[1], 2) ))
results
results <- c("Trees with 10-fold cross validation", round(modelFit_rpart$results$Accuracy[1], 2) ))
results <- rbind(results, results <- c("SVM with 10-fold cross validation", round(modelFit_svm$results$Accuracy[1], 2) ))
results <- rbind(results, results <- c("KNN with 10-fold cross validation", round(modelFit_knn$results$Accuracy[1], 2))
results <- rbind(results, results <- c("Random forest bootstrapped", round(modelFit_rf$results$Accuracy[1], 2) ))
results
results <- c("Trees with 10-fold cross validation", round(modelFit_rpart$results$Accuracy[1], 2))
results <- rbind(results, results <- c("SVM with 10-fold cross validation", round(modelFit_svm$results$Accuracy[1], 2) ))
results <- rbind(results, results <- c("KNN with 10-fold cross validation", round(modelFit_knn$results$Accuracy[1], 2)))
results <- rbind(results, results <- c("Random forest bootstrapped", round(modelFit_rf$results$Accuracy[1], 2)))
results
results <- c("Trees with 10-fold cross validation", round(modelFit_rpart$results$Accuracy[1], 2))
results <- rbind(results, results <- c("SVM with 10-fold cross validation", round(modelFit_svm$results$Accuracy[1], 2) ))
results <- rbind(results, results <- c("KNN with 10-fold cross validation", round(modelFit_knn$results$Accuracy[1], 2)))
results <- rbind(results, results <- c("Random forest bootstrapped", round(modelFit_rf$results$Accuracy[1], 2)))
names(results) <- c("Prediction model", "Accuracy")
results
results
clas(results)
class(results)
results <- data.frame("Prediction Model", Accuracy = 0.00)
results <- results[-1,]
results <- c("Trees with 10-fold cross validation", round(modelFit_rpart$results$Accuracy[1], 2))
results <- rbind(results, results <- c("SVM with 10-fold cross validation", round(modelFit_svm$results$Accuracy[1], 2) ))
results <- rbind(results, results <- c("KNN with 10-fold cross validation", round(modelFit_knn$results$Accuracy[1], 2)))
results <- rbind(results, results <- c("Random forest bootstrapped", round(modelFit_rf$results$Accuracy[1], 2)))
names(results) <- c("Prediction model", "Accuracy")
results
results <- data.frame("Prediction Model", Accuracy = 0.00)
results <- results[-1,]
results
results <- rbind(results, c("Trees with 10-fold cross validation", round(modelFit_rpart$results$Accuracy[1], 2)))
results <- rbind(results, results <- c("SVM with 10-fold cross validation", round(modelFit_svm$results$Accuracy[1], 2) ))
results <- rbind(results, results <- c("KNN with 10-fold cross validation", round(modelFit_knn$results$Accuracy[1], 2)))
results <- rbind(results, results <- c("Random forest bootstrapped", round(modelFit_rf$results$Accuracy[1], 2)))
names(results) <- c("Prediction model", "Accuracy")
results
results <- data.frame(Model=character(), Accuracy=double())
str(results)
results <- data.frame(Model=character(), Accuracy=double())
results <- rbind(results, c("Trees with 10-fold cross validation", round(modelFit_rpart$results$Accuracy[1], 2)))
results
results <- rbind(results, results <- c("SVM with 10-fold cross validation", round(modelFit_svm$results$Accuracy[1], 2) ))
results <- data.frame(Model=character(), Accuracy=double())
results <- rbind(results, c("Trees with 10-fold cross validation", round(modelFit_rpart$results$Accuracy[1], 2)))
results <- rbind(results,  c("SVM with 10-fold cross validation", round(modelFit_svm$results$Accuracy[1], 2) ))
results <- rbind(results, c("KNN with 10-fold cross validation", round(modelFit_knn$results$Accuracy[1], 2)))
results <- rbind(results, c("Random forest bootstrapped", round(modelFit_rf$results$Accuracy[1], 2)))
results
results <- data.frame(Model=character(), Accuracy=double())
results <- rbind(results, c("Trees with 10-fold cross validation", round(modelFit_rpart$results$Accuracy[1], 2)))
results
results <- rbind(results,  c("SVM with 10-fold cross validation", round(modelFit_svm$results$Accuracy[1], 2) ))
results <- rbind(results,  c("SVM with 10-fold cross validation", round(modelFit_svm$results$Accuracy[1], 2)))
c("SVM with 10-fold cross validation", round(modelFit_svm$results$Accuracy[1], 2))
s
results
results <- rbind(results,  Model = c("SVM with 10-fold cross validation", Accuracy = round(modelFit_svm$results$Accuracy[1], 2)))
results <- data.frame(Model=character(), Accuracy=double())
results <- rbind(results, c("Trees with 10-fold cross validation", round(modelFit_rpart$results$Accuracy[1], 2)))
results
results <- data.frame(Model=character(), Accuracy=double())
results <- rbind(results, Trees = c("Trees with 10-fold cross validation", round(modelFit_rpart$results$Accuracy[1], 2)))
results
results <- data.frame(Model=character(), Accuracy=double())
results <- rbind(results, Trees = c("Trees with 10-fold cross validation", round(modelFit_rpart$results$Accuracy[1], 2)))
results <- rbind(results,  SVM = c("SVM with 10-fold cross validation", Accuracy = round(modelFit_svm$results$Accuracy[1], 2)))
results
results <- data.frame(Model=character(), Accuracy=double())
results <- rbind(results, Trees = c("Trees with 10-fold cross validation", round(modelFit_rpart$results$Accuracy[1], 2)))
results
results <- c("Trees with 10-fold cross validation", round(modelFit_rpart$results$Accuracy[1], 2)))
results <- rbind(results,  c("SVM with 10-fold cross validation", Accuracy = round(modelFit_svm$results$Accuracy[1], 2)))
results <- rbind(results, c("KNN with 10-fold cross validation", round(modelFit_knn$results$Accuracy[1], 2)))
results <- rbind(results, c("Random forest bootstrapped", round(modelFit_rf$results$Accuracy[1], 2)))
results
results <- c("Trees with 10-fold cross validation", round(modelFit_rpart$results$Accuracy[1], 2)))
results <- NULL
results <- c("Trees with 10-fold cross validation", round(modelFit_rpart$results$Accuracy[1], 2)))
results <- c("Trees with 10-fold cross validation", round(modelFit_rpart$results$Accuracy[1], 2))
results
results <- rbind(results,  c("SVM with 10-fold cross validation", Accuracy = round(modelFit_svm$results$Accuracy[1], 2)))
results <- rbind(results, c("KNN with 10-fold cross validation", round(modelFit_knn$results$Accuracy[1], 2)))
results <- rbind(results, c("Random forest bootstrapped", round(modelFit_rf$results$Accuracy[1], 2)))
results
results <- c("Trees with 10-fold cross validation", round(modelFit_rpart$results$Accuracy[1], 2))
results <- rbind(results,  c(Model = "SVM with 10-fold cross validation", Accuracy = round(modelFit_svm$results$Accuracy[1], 2)))
results <- rbind(results, c("KNN with 10-fold cross validation", round(modelFit_knn$results$Accuracy[1], 2)))
results <- rbind(results, c("Random forest bootstrapped", round(modelFit_rf$results$Accuracy[1], 2)))
results
results <- c("Trees with 10-fold cross validation", round(modelFit_rpart$results$Accuracy[1], 2))
results <- rbind(results,  c(Model = "SVM with 10-fold cross validation", Accuracy = round(modelFit_svm$results$Accuracy[1], 2)))
results <- rbind(results, c("KNN with 10-fold cross validation", round(modelFit_knn$results$Accuracy[1], 2)))
results <- rbind(results, c("Random forest bootstrapped", round(modelFit_rf$results$Accuracy[1], 2)))
results <- as.data.frame(results)
results
results
results <- c("Trees with 10-fold cross validation", round(modelFit_rpart$results$Accuracy[1], 2))
results <- rbind(results,  c(Model = "SVM with 10-fold cross validation", Accuracy = round(modelFit_svm$results$Accuracy[1], 2)))
results <- rbind(results, c("KNN with 10-fold cross validation", round(modelFit_knn$results$Accuracy[1], 2)))
results <- rbind(results, c("Random forest bootstrapped", round(modelFit_rf$results$Accuracy[1], 2)))
results
results <- Tree = c("Trees with 10-fold cross validation", round(modelFit_rpart$results$Accuracy[1], 2))
class(results)
str(results)
results <- as.list(results )
results
as.data.frame(results)
results
trees <- c("Trees with 10-fold cross validation", round(modelFit_rpart$results$Accuracy[1], 2))
svm <- results,  c(Model = "SVM with 10-fold cross validation", Accuracy = round(modelFit_svm$results$Accuracy[1], 2))
knn  <- c("KNN with 10-fold cross validation", round(modelFit_knn$results$Accuracy[1], 2))
rf <- c("Random forest bootstrapped", round(modelFit_rf$results$Accuracy[1], 2))
results <- as.data.frame(trees, svm, knn, rf)
results
svm
svm
trees
modelFit_rf
models <- c("Trees with 10-fold cross validation", "SVM with 10-fold cross validation", "KNN with 10-fold cross validation", "Random forest bootstrap resampling")
acc <- c(round(modelFit_rpart$results$Accuracy[1], 2), round(modelFit_svm$results$Accuracy[1], 2), round(modelFit_knn$results$Accuracy[1], 2), round(modelFit_rf$results$Accuracy[1], 2))
models
acc
data.frame(models, acc)
Model  <- c("Trees with 10-fold cross validation", "SVM with 10-fold cross validation", "KNN with 10-fold cross validation", "Random forest bootstrap resampling")
Accuracy <- c(round(modelFit_rpart$results$Accuracy[1], 2), round(modelFit_svm$results$Accuracy[1], 2), round(modelFit_knn$results$Accuracy[1], 2), round(modelFit_rf$results$Accuracy[1], 2))
data.fram(Model, Accuracy)
data.frame(Model, Accuracy)
cf
test.data.PC <- predict(preProc, test.data[, -53])
pred_rf <- predict(modelFit_rf, test.data.PC)
cf <- confusionMatrix(pred_rf, test.data$classe)
cf
cf$overall
cf$overall[1]
round(cf$overall[1], 2)
test.data.PC <- predict(preProc, test.data[, -53])
pred_rf <- predict(modelFit_rf, test.data.PC)
cf <- confusionMatrix(pred_rf, test.data$classe)
cf
final.data <- read.csv("C:/Users/conradwo/Documents/R/machlearning/pml-testing.csv")
# Apply same rules to clean up the data
final.data <- final.data[, !names(final.data) %in% names(final.data)[na.columns]]
final.data <- final.data[, !names(final.data) %in% names(final.data)[blank.columns]]
final.data$user_name <- NULL
final.data$raw_timestamp_part_1 <- NULL
final.data$raw_timestamp_part_2 <- NULL
final.data$cvtd_timestamp <- NULL
final.data$new_window <- NULL
final.data$num_window <- NULL
final.data$X <- NULL
# Apply the PCA model calculated with the training set
final.data.PC <- predict(preProc, final.data[, -53])
# Predict the values for classe for the 20 observations
pred <- predict(modelFit_rf, final.data.PC)
pred
pred
cor_matrix
head(cor_matrix)
??kable
kable(event_impact[cor_matrix[cor_matrix$value > 0.8, ], format.args = list(decimal.mark = ".", big.mark = ","))
kable(event_impact[cor_matrix[cor_matrix$value > 0.8, ], format.args = list(decimal.mark = ".", big.mark = ",")
kable(cor_matrix[cor_matrix$value > 0.8, ])
kable(cor_matrix[cor_matrix$value > 0.8, ])
library(knitr)
kable(cor_matrix[cor_matrix$value > 0.8, ])
head(cor_matrix)
cor_matrix <- abs(cor(train.data[, -53]))
diag(cor_matrix) <- 0
cor_matrix <- melt(cor_matrix)
cor_matrix <- cor_matrix[order(cor_matrix$X1), ]
#cor_matrix[cor_matrix$value > 0.8, ]
names(cor_matrix) <- c("Feature 1", "Feature 2", "Correlation")
kable(cor_matrix[cor_matrix$value > 0.8, ])
library(caret)
library(data.table)
library(reshape)
library(knitr)
names(cor_matrix) <- c("Feature 1", "Feature 2", "Correlation")
head(cor_matrix)
kable(cor_matrix[cor_matrix$value > 0.8, ])
cor_matrix <- abs(cor(train.data[, -53]))
diag(cor_matrix) <- 0
cor_matrix <- melt(cor_matrix)
cor_matrix <- cor_matrix[order(cor_matrix$X1), ]
kable(cor_matrix[cor_matrix$value > 0.8, ])
str(cor_matrix)
names(cor_matrix) <- c("Feature 1", "Feature 2", "Correlation")
str(cor_matrix)
kable(cor_matrix[cor_matrix$value > 0.8, ])
head(cor_matrix)
cor_matrix[cor_matrix$value > 0.8, ]
kable(cor_matrix[cor_matrix$Correlation  > 0.8, ])
cor_matrix <- abs(cor(train.data[, -53]))
diag(cor_matrix) <- 0
cor_matrix <- melt(cor_matrix)
cor_matrix <- cor_matrix[order(cor_matrix$X1), ]
names(cor_matrix) <- c("Feature 1", "Feature 2", "Correlation")
kable(cor_matrix[cor_matrix$Correlation  > 0.8, ])
kable(results)
results <- data.frame(Model, Accuracy)
results
str(results)
names(results)
kable(results)
final.data.PC <- predict(preProc, final.data[, -53])
# Predict the values for classe for the 20 observations
pred <- predict(modelFit_rf, final.data.PC)
pred
View(inTrain)
clear()
reset()
cls()
library(caret)
library(data.table)
library(reshape)
library(knitr)
set.seed(12345)
data <- read.csv("C:/Users/conradwo/Documents/R/machlearning/pml-training.csv")
# Remove the columns with NA's
na.columns  <- apply(data, 2, anyNA)
data <- data[, !names(data) %in% names(data)[na.columns]]
# Remove the columns that contain blank data in one or more rows
blank.columns <- apply(data, 2, function(x) sum(x=="")!=0)
data <- data[, !names(data) %in% names(data)[blank.columns]]
# Remove non-relevant columns
data$user_name <- NULL
data$raw_timestamp_part_1 <- NULL
data$raw_timestamp_part_2 <- NULL
data$cvtd_timestamp <- NULL
data$new_window <- NULL
data$num_window <- NULL
data$X <- NULL
inTrain <- createDataPartition(y=data$classe,
p=0.6, list=FALSE)
train.data <- data[inTrain,]
test.data <- data[-inTrain,]
cor_matrix <- abs(cor(train.data[, -53]))
diag(cor_matrix) <- 0
cor_matrix <- melt(cor_matrix)
cor_matrix <- cor_matrix[order(cor_matrix$X1), ]
names(cor_matrix) <- c("Feature 1", "Feature 2", "Correlation")
kable(cor_matrix[cor_matrix$Correlation  > 0.8, ])
preProc <- preProcess(train.data[, -53], method="pca")
train.data.PC <- predict(preProc, train.data[, -53])
modelFit_rf <- train(train.data$classe ~ ., method="rf", data=train.data.PC)
# Tree Model
tc <- trainControl("cv",10)
modelFit_rpart <- train(train.data$classe ~ ., data= train.data.PC, method="rpart", trControl=tc)
# SVM
modelFit_svm <- train(train.data$classe ~ ., method="svmLinear", data=train.data.PC, trControl=tc)
# KNN
modelFit_knn <- train(train.data$classe ~ ., method="knn", data=train.data.PC, trControl=tc)
Model  <- c("Trees with 10-fold cross validation", "SVM with 10-fold cross validation", "KNN with 10-fold cross validation", "Random forest bootstrap resampling")
Accuracy <- c(round(modelFit_rpart$results$Accuracy[1], 2), round(modelFit_svm$results$Accuracy[1], 2), round(modelFit_knn$results$Accuracy[1], 2), round(modelFit_rf$results$Accuracy[1], 2))
results <- data.frame(Model, Accuracy)
kable(results)
test.data.PC <- predict(preProc, test.data[, -53])
pred_rf <- predict(modelFit_rf, test.data.PC)
cf <- confusionMatrix(pred_rf, test.data$classe)
cf
final.data <- read.csv("C:/Users/conradwo/Documents/R/machlearning/pml-testing.csv")
# Apply same rules to clean up the data
final.data <- final.data[, !names(final.data) %in% names(final.data)[na.columns]]
final.data <- final.data[, !names(final.data) %in% names(final.data)[blank.columns]]
final.data$user_name <- NULL
final.data$raw_timestamp_part_1 <- NULL
final.data$raw_timestamp_part_2 <- NULL
final.data$cvtd_timestamp <- NULL
final.data$new_window <- NULL
final.data$num_window <- NULL
final.data$X <- NULL
# Apply the PCA model calculated with the training set
final.data.PC <- predict(preProc, final.data[, -53])
# Predict the values for classe for the 20 observations
pred <- predict(modelFit_rf, final.data.PC)
pred
final.data <- read.csv("C:/Users/conradwo/Documents/R/machlearning/pml-testing.csv")
# Apply same rules to clean up the data
final.data <- final.data[, !names(final.data) %in% names(final.data)[na.columns]]
final.data <- final.data[, !names(final.data) %in% names(final.data)[blank.columns]]
final.data$user_name <- NULL
final.data$raw_timestamp_part_1 <- NULL
final.data$raw_timestamp_part_2 <- NULL
final.data$cvtd_timestamp <- NULL
final.data$new_window <- NULL
final.data$num_window <- NULL
final.data$X <- NULL
# Apply the PCA model calculated with the training set
final.data.PC <- predict(preProc, final.data[, -53])
# Predict the values for classe for the 20 observations
pred <- predict(modelFit_rf, final.data.PC)
pred
test.data.PC <- predict(preProc, test.data[, -53])
pred_rf <- predict(modelFit_rf, test.data.PC)
cf <- confusionMatrix(pred_rf, test.data$classe)
cf
kable(cf)
setwd("./R/machlearning")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", "pml-training.csv")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", "pml-testing.csv")
data <- read.csv("C:/Users/conradwo/Documents/R/machlearning/pml-training.csv")
View(data)
qplot(data$classe, color=user_name)
qplot(data$classe, color=user_name, data=data)
librar(ggplot2)
librarr(ggplot2)
library(ggplot2)
qplot(data$classe, color=user_name, data=data)
qplot(user_name, color=classe, data=data)
qplot(data$classe, color=user_name, data=data)
View(data)
na.columns  <- apply(data, 2, anyNA)
data <- data[, !names(data) %in% names(data)[na.columns]]
# Remove the columns that contain blank data in one or more rows
blank.columns <- apply(data, 2, function(x) sum(x=="")!=0)
data <- data[, !names(data) %in% names(data)[blank.columns]]
View(data)
modelFit_rf
modelFit_rf$results$Accuracy + modelFit_rf$results$AccuracySD
Model  <- c("Trees with 10-fold cross validation", "SVM with 10-fold cross validation", "KNN with 10-fold cross validation", "Random forest bootstrap resampling")
In.Sample.Accuracy <- c(round(modelFit_rpart$results$Accuracy[1], 2), round(modelFit_svm$results$Accuracy[1], 2), round(modelFit_knn$results$Accuracy[1], 2), round(modelFit_rf$results$Accuracy[1], 2))
In.Sample.Error <-c(1 - round(modelFit_rpart$results$Accuracy[1], 2), 1- round(modelFit_svm$results$Accuracy[1], 2), 1- round(modelFit_knn$results$Accuracy[1], 2), 1- round(modelFit_rf$results$Accuracy[1], 2))
results <- data.frame(Model, In.Sample.Accuracy, In.Sample.Error)
kable(results)
Model  <- c("Trees with 10-fold cross validation", "SVM with 10-fold cross validation", "KNN with 10-fold cross validation", "Random forest bootstrap resampling")
In.Sample.Accuracy <- c(round(modelFit_rpart$results$Accuracy[1], 2), round(modelFit_svm$results$Accuracy[1], 2), round(modelFit_knn$results$Accuracy[1], 2), round(modelFit_rf$results$Accuracy[1], 2))
In.Sample.Error <-c(1 - round(modelFit_rpart$results$Accuracy[1], 2), 1- round(modelFit_svm$results$Accuracy[1], 2), 1- round(modelFit_knn$results$Accuracy[1], 2), 1- round(modelFit_rf$results$Accuracy[1], 2))
results <- data.frame(Model, In.Sample.Accuracy, In.Sample.Error)
kable(results)
library(caret)
library(data.table)
library(reshape)
library(knitr)
Model  <- c("Trees with 10-fold cross validation", "SVM with 10-fold cross validation", "KNN with 10-fold cross validation", "Random forest bootstrap resampling")
In.Sample.Accuracy <- c(round(modelFit_rpart$results$Accuracy[1], 2), round(modelFit_svm$results$Accuracy[1], 2), round(modelFit_knn$results$Accuracy[1], 2), round(modelFit_rf$results$Accuracy[1], 2))
In.Sample.Error <-c(1 - round(modelFit_rpart$results$Accuracy[1], 2), 1- round(modelFit_svm$results$Accuracy[1], 2), 1- round(modelFit_knn$results$Accuracy[1], 2), 1- round(modelFit_rf$results$Accuracy[1], 2))
results <- data.frame(Model, In.Sample.Accuracy, In.Sample.Error)
kable(results)
test.data.PC <- predict(preProc, test.data[, -53])
cm_rf <- confusionMatrix(predict(modelFit_rf, test.data.PC), test.data$classe)
cm_rpart <- confusionMatrix(predict(modelFit_rpart, test.data.PC), test.data$classe)
cm_svm <- confusionMatrix(predict(modelFit_svm, test.data.PC), test.data$classe)
cm_knn <- confusionMatrix(predict(modelFit_knn, test.data.PC), test.data$classe)
Model  <- c("Trees with 10-fold cross validation", "SVM with 10-fold cross validation", "KNN with 10-fold cross validation", "Random forest bootstrap resampling")
Out.Of.Sample.Accuracy <- c(round(cm_rpart$overall[1], 2), round(cm_svm$overall[1], 2), round(cm_knn$overall[1], 2), round(cm_rf$overall[1], 2))
Out.Of.Sample.Error <- c(1 - round(cm_rpart$overall[1], 2), 1 - round(cm_svm$overall[1], 2), 1 - round(cm_knn$overall[1], 2), 1 - round(cm_rf$overall[1], 2))
results <- data.frame(results, Out.Of.Sample.Accuracy, Out.Of.Sample.Error)
kable(results)
featurePlot(data$classe, data$user.name)
??featurePlot
View(data)
head(data$classe)
featurePlot(data$classe, data$user_name)
plot(data$classe, data$user_name)
plot(data$classe, data$user_name)
table(data$username)
table(data$classe, data$user_name)
?table
prop.table
prop.table(data$classe, data$user_name)
table(data$classe, data$user_name)
t <table(data$classe, data$user_name)
t <- table(data$classe, data$user_name)
t
prop_table(t)
prop.table(t)
qplot(prop.table(t))
melt(prop.table(t))
m <- melt(prop.table(t))
plot(value, Var.1, col=Var.2, data=m)
plot(m$value, m$Var.1, col=m$Var.2)
??plot
qqplot(m$value, m$Var.1)
hist(m$Var.1, m$value   )
hist(m$value, m$Var.1)
hist(m$value)
hist(m$Var.1)
?hist
?barplot
barplot(m$value, m$Var.1)
barplot(m$value )
m
??plot
qqplot(m$Var.1)
qqplot(m$Var.1, m$value)
plot(m$Var.1, m$value)
??"plot"
?plot
plot(m$Var.1, m$value, type="h")
t
pt <- prop.table(t)
pt
plot(pt)
qqplot(pt)
?plot
pt <- prop.table(t, 2)
pt
t <- table(data$user_name, data$classe)
t
pt <- prop.table(t)
pt
plot(pt)
t <- table(data$user_name, data$classe)
pt <- prop.table(t)
plot(pt)
t <- table(data$user_name, data$classe)
pt <- prop.table(t)
plot(pt)
t <- table(data$classe, data$user_name)
pt <- prop.table(t)
plot(pt)
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv", "pml-training.csv")
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv", "pml-testing.csv")
??download.file
fn <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
lfn <- "pml-training.csv"
download.file(fn, lfn)
